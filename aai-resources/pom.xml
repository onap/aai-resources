<?xml version="1.0" encoding="UTF-8"?>
<!--

    ============LICENSE_START=======================================================
    org.onap.aai
    ================================================================================
    Copyright Â© 2017-2018 AT&T Intellectual Property. All rights reserved.
    ================================================================================
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    ============LICENSE_END=========================================================

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.onap.aai.resources</groupId>
    <artifactId>aai-resources</artifactId>
    <parent>
        <groupId>org.onap.aai.resources</groupId>
        <artifactId>resources</artifactId>
        <version>1.15.4-SNAPSHOT</version>
    </parent>
    <properties>
        <java.version>11</java.version>
        <start-class>org.onap.aai.ResourcesApp</start-class>

        <!-- Default docker registry that maven fabric plugin will try to pull from -->
        <docker.registry>docker.io</docker.registry>
        <!-- Specifying the docker push registry where the image should be pushed -->
        <!-- This value should be overwritten at runtime to wherever need to be pushed to -->
        <docker.push.registry>localhost:5000</docker.push.registry>
        <aai.docker.version>1.0.0</aai.docker.version>

        <groovy.version>2.5.15</groovy.version>

        <!--
             Location where assembly of our scripts, resources and main jar will be held
             Check the ${project.artifactId}/src/main/assembly/descriptor.xml for more info
        -->
        <aai.build.directory>${project.build.directory}/${project.artifactId}-${project.version}-build/
        </aai.build.directory>
        <aai.docker.namespace>onap</aai.docker.namespace>

        <maven.skip.tests>true</maven.skip.tests>
        <snapshot.file>${project.basedir}/snapshots/snapshot.graphson</snapshot.file>

        <jacoco.line.coverage.limit>0.68</jacoco.line.coverage.limit>
        <license.goal.type>check</license.goal.type>

        <!-- This will be used for the docker images as the default format of maven build has issues -->
        <maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>

        <!-- Start of Default ONAP Schema Properties -->
        <schema.source.name>onap</schema.source.name>
        <schema.configuration.location>N/A</schema.configuration.location>
        <schema.nodes.location>${project.basedir}/src/main/resources/schema/${schema.source.name}/oxm</schema.nodes.location>
        <schema.edges.location>${project.basedir}/src/main/resources/schema/${schema.source.name}/dbedgerules</schema.edges.location>
        <schema.version.depth.start>v10</schema.version.depth.start>
        <schema.version.related.link.start>v10</schema.version.related.link.start>
        <schema.version.app.root.start>v11</schema.version.app.root.start>
        <schema.version.namespace.change.start>v12</schema.version.namespace.change.start>
        <schema.version.edge.label.start>v12</schema.version.edge.label.start>
        <schema.version.api.default>v30</schema.version.api.default>
        <schema.version.list>v10,v11,v12,v13,v14,v15,v23,v29,v30</schema.version.list>
        <schema.uri.base.path>/aai</schema.uri.base.path>
        <!-- <schema.translator.list>config</schema.translator.list> -->
        <schema.ingest.file>${project.basedir}/src/main/resources/application.properties</schema.ingest.file>

        <!-- End of Default ONAP Schema Properties -->
        <!-- <janusgraph.version>0.6.4</janusgraph.version>
        <gremlin.version>3.5.8</gremlin.version> -->

        <javax.servlet.version>4.0.1</javax.servlet.version>
        <keycloak.version>11.0.2</keycloak.version>
        <testcontainers.version>1.6.1</testcontainers.version>
        <mockito.core.version>4.4.0</mockito.core.version>
        <eclipse.persistence.version>2.7.7</eclipse.persistence.version>
        <!-- Setting some default value to not complain by editor but it will be overridden by gmaven plugin -->

        <!-- Integration tests will be skipped by default. Could be enabled here or by -DskipITs=false-->
        <skipITs>true</skipITs>

        <swagger.version>1.6.8</swagger.version>
        <spring-cloud.version>2021.0.9</spring-cloud.version>
        <!-- fix the driver version to match the one defined in janusgraph-cql
            spring-boot (2.4) is otherwise downgrading it to 4.9.0 -->
        <!-- see https://github.com/spring-projects/spring-boot/blob/d336a96b7f204a398b8237560c5dfa7095c53460/spring-boot-project/spring-boot-dependencies/build.gradle#L163 -->
        <!-- see https://github.com/JanusGraph/janusgraph/blob/6105d67f412def90ed6e704fa01cbf656602e6c9/pom.xml#L112 -->
        <cassandra-driver.version>4.17.0</cassandra-driver.version>
        <datastax.native-protocol.version>1.5.1</datastax.native-protocol.version>
    </properties>
    <profiles>
        <!-- Docker profile to be used for building docker image and pushing to nexus -->
        <profile>
            <id>docker</id>
            <build>
                <plugins>
                    <plugin>
                    <groupId>org.codehaus.groovy.maven</groupId>
                    <artifactId>gmaven-plugin</artifactId>
                    <version>1.0</version>
                    <executions>
                        <execution>
                            <phase>pre-clean</phase>
                        </execution>
                    </executions>
                </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <configuration>
                            <verbose>true</verbose>
                            <apiVersion>1.23</apiVersion>
                            <images>
                                <image>
                                    <name>${docker.push.registry}/${aai.docker.namespace}/${project.artifactId}:%l
                                    </name>
                                    <build>
                                        <filter>@</filter>
                                        <tags>
                                            <tag>latest</tag>
                                            <tag>${project.docker.latesttag.version}</tag>
                                            <tag>${project.major.version}.${project.minor.version}-STAGING-${maven.build.timestamp}</tag>
                                        </tags>
                                        <cleanup>try</cleanup>
                                        <dockerFileDir>${project.basedir}/src/main/docker</dockerFileDir>
                                        <assembly>
                                            <inline>
                                                <fileSets>
                                                    <fileSet>
                                                        <directory>${aai.build.directory}</directory>
                                                        <outputDirectory>/${project.artifactId}</outputDirectory>
                                                    </fileSet>
                                                </fileSets>
                                            </inline>
                                        </assembly>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <id>clean-images</id>
                                <phase>pre-clean</phase>
                                <goals>
                                    <goal>remove</goal>
                                </goals>
                                <configuration>
                                    <removeAll>true</removeAll>
                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-images</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>push-images</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Start of ONAP Profile -->
        <profile>
            <id>onap</id>
            <properties>
                <schema.source.name>onap</schema.source.name>
                <schema.version.namespace.change.start>v12</schema.version.namespace.change.start>
                <schema.version.list>v10,v11,v12,v13,v14,v15,v16,v23,v29,v30</schema.version.list>
                <schema.ingest.file>${project.basedir}/src/main/resources/application.properties</schema.ingest.file>
            </properties>
        </profile>
        <!-- End of ONAP Profile -->
        <profile>
            <id>runAjsc</id>
            <properties>
                <skipTests>${maven.skip.tests}</skipTests>
            </properties>
            <build>
                <defaultGoal>pre-integration-test</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.6.0</version>
                        <executions>
                            <execution>
                                <id>run-spring-boot</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <mainClass>${start-class}</mainClass>
                            <systemProperties>
                                <property>
                                    <key>snapshot.location</key>
                                    <value>${snapshot.file}</value>
                                </property>
                                <property>
                                    <key>schema.source.name</key>
                                    <value>${schema.source.name}</value>
                                </property>
                                <property>
                                    <key>schema.configuration.location</key>
                                    <value>${schema.configuration.location}</value>
                                </property>
                                <property>
                                    <key>schema.nodes.location</key>
                                    <value>${schema.nodes.location}</value>
                                </property>
                                <property>
                                    <key>schema.edges.location</key>
                                    <value>${schema.edges.location}</value>
                                </property>
                                <property>
                                    <key>schema.version.depth.start</key>
                                    <value>${schema.version.depth.start}</value>
                                </property>
                                <property>
                                    <key>schema.version.related.link.start</key>
                                    <value>${schema.version.related.link.start}</value>
                                </property>
                                <property>
                                    <key>schema.version.app.root.start</key>
                                    <value>${schema.version.app.root.start}</value>
                                </property>
                                <property>
                                    <key>schema.version.namespace.change.start</key>
                                    <value>${schema.version.namespace.change.start}</value>
                                </property>
                                <property>
                                    <key>schema.version.edge.label.start</key>
                                    <value>${schema.version.edge.label.start}</value>
                                </property>
                                <property>
                                    <key>schema.version.api.default</key>
                                    <value>${schema.version.api.default}</value>
                                </property>
                                <property>
                                    <key>schema.version.list</key>
                                    <value>${schema.version.list}</value>
                                </property>
                                <property>
                                    <key>schema.uri.base.path</key>
                                    <value>${schema.uri.base.path}</value>
                                </property>
                                <property>
                                    <key>schema.ingest.file</key>
                                    <value>${schema.ingest.file}</value>
                                </property>
                            </systemProperties>
                            <executable>java</executable>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jetty</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-jersey2</artifactId>
            <version>1.8.13</version>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1</version>
        </dependency>
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
        </dependency>

        <dependency>
            <groupId>net.sf.jopt-simple</groupId>
            <artifactId>jopt-simple</artifactId>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-core</artifactId>
            <version>${swagger.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>javax.ws.rs</groupId>
                    <artifactId>jsr311-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-jersey2-jaxrs</artifactId>
            <version>${swagger.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.glassfish.jersey.media</groupId>
                    <artifactId>jersey-media-multipart</artifactId>
                </exclusion>
                <exclusion>
                    <artifactId>jersey-core</artifactId>
                    <groupId>com.sun.jersey</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>jersey-json</artifactId>
                    <groupId>com.sun.jersey</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>jersey-server</artifactId>
                    <groupId>com.sun.jersey</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>jersey-client</artifactId>
                    <groupId>com.sun.jersey</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>jsr311-api</artifactId>
                    <groupId>javax.ws.rs</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>jersey-multipart</artifactId>
                    <groupId>com.sun.jersey.contribs</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-access</artifactId>
        </dependency>
        <dependency>
            <groupId>org.codehaus.janino</groupId>
            <artifactId>janino</artifactId>
            <version>3.1.12</version>
        </dependency>
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>6.6</version>
        </dependency>
        <dependency>
          <groupId>org.hamcrest</groupId>
          <artifactId>hamcrest</artifactId>
          <version>2.2</version>
          <exclusions>
            <exclusion>
              <groupId>junit</groupId>
              <artifactId>junit</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.jnr</groupId>
            <artifactId>jnr-ffi</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.core.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.mockito</groupId>
          <artifactId>mockito-junit-jupiter</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.beust</groupId>
            <artifactId>jcommander</artifactId>
        </dependency>
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
        </dependency>
        <dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>eclipselink</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.moxy</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.github.fge</groupId>
            <artifactId>json-patch</artifactId>
        </dependency>
        <dependency>
            <groupId>org.javatuples</groupId>
            <artifactId>javatuples</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
        </dependency>
        <dependency>
            <groupId>org.onap.aai.aai-common</groupId>
            <artifactId>aai-core</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.sun.jersey</groupId>
                    <artifactId>jersey-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-http</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-server</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-web</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.onap.aai.aai-common</groupId>
            <artifactId>aai-schema-ingest</artifactId>
        </dependency>
        <!-- Do not use the jersey-client since jersey client 1.0 version clashes
            with jersey 2 which we are using -->
        <!-- Use this to make http requests instead of jersey 1.0 client -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.21.0</version>
            <scope>test</scope>
        </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-junit</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>com.vaadin.external.google</groupId>
                    <artifactId>android-json</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--
            Explicitly stating the security spring framework and
            exclude the bouncy castle since that is somehow overwriting
            our p12 file decryption that's built into java security
            This will cause the password is incorrect
            This needs to be added back if org.bouncy castle dependency
            sneaks backs in and causing issues with the two way ssl
        -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-rsa</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.bouncycastle</groupId>
                    <artifactId>bcpkix-jdk15on</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-handler</artifactId>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
        </dependency>

        <!-- Only used for the WebTestClient -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.janusgraph</groupId>
            <artifactId>janusgraph-cql</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.janusgraph</groupId>
            <artifactId>janusgraph-inmemory</artifactId>
            <version>${janusgraph.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.tinkerpop</groupId>
            <artifactId>gremlin-groovy</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.keycloak</groupId>
            <artifactId>keycloak-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.dasniko</groupId>
            <artifactId>testcontainers-keycloak</artifactId>
            <version>${testcontainers.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.junit.jupiter</groupId>
          <artifactId>junit-jupiter</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.keycloak</groupId>
            <artifactId>keycloak-admin-client</artifactId>
            <version>${keycloak.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <version>1.19.8</version>
            <scope>test</scope>
            <!-- <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions> -->
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>1.19.8</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>k6</artifactId>
            <version>1.19.8</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.xmlunit</groupId>
            <artifactId>xmlunit-matchers</artifactId>
            <version>2.7.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.34</version>
			<scope>provided</scope>
		</dependency>
        <dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.keycloak.bom</groupId>
                <artifactId>keycloak-adapter-bom</artifactId>
                <version>${keycloak.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>33.3.1-jre</version>
            </dependency>
            <!-- cassandra driver -->
            <dependency>
                <groupId>com.datastax.oss</groupId>
                <artifactId>java-driver-core</artifactId>
                <version>${cassandra-driver.version}</version>
            </dependency>
            <dependency>
                <groupId>com.datastax.oss</groupId>
                <artifactId>java-driver-query-builder</artifactId>
                <version>${cassandra-driver.version}</version>
            </dependency>
            <dependency>
                <groupId>com.datastax.oss</groupId>
                <artifactId>native-protocol</artifactId>
                <version>${datastax.native-protocol.version}</version>
            </dependency>
            <!-- /cassandra driver -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-configuration2</artifactId>
                <version>2.11.0</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <build>
        <resources>
            <resource>
                <directory>${project.basedir}/src/main/swm</directory>
                <targetPath>${project.build.directory}/swm</targetPath>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <includes>
                    <include>application.properties</include>
                    <include>dme2.properties</include>
                    <include>logback.xml</include>
                    <include>localhost-access-logback.xml</include>
                </includes>
                <targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig</targetPath>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources/etc/appprops/</directory>
                <includes>
                    <include>janusgraph-realtime.properties</include>
                    <include>janusgraph-cached.properties</include>
                    <include>aaiconfig.properties</include>
                </includes>
                <targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig</targetPath>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources/etc/auth/</directory>
                <includes>
                    <include>aai-client-cert.p12</include>
                    <include>tomcat_keystore</include>
                    <include>aai_policy.json</include>
                </includes>
                <targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig</targetPath>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources/</directory>
                <includes>
                    <include>logback.xml</include>
                    <include>localhost-access-logback.xml</include>
                    <include>hbase-site.xml</include>
                </includes>
                <targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig</targetPath>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources/schema/</directory>
                <includes>
                    <include>**/oxm/**/*.xml</include>
                    <include>**/dbedgerules/**/*.json</include>
                </includes>
                <targetPath>${project.build.directory}/swm/package/nix/dist_files/opt/app/${project.artifactId}/appconfig/schema</targetPath>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/docker</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <targetPath>${aai.build.directory}</targetPath>
                <filtering>true</filtering>
            </resource>
        </resources>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>2.8</version>
                    <executions>
                        <execution>
                            <id>unpack-schema-dependency</id>
                            <phase>initialize</phase>
                            <goals>
                                <goal>unpack</goal>
                            </goals>
                            <configuration>
                                <artifactItems>
                                    <artifactItem>
                                        <groupId>org.onap.aai.schema-service</groupId>
                                        <artifactId>aai-schema</artifactId>
                                        <outputDirectory>${project.basedir}/src/main/resources/schema/</outputDirectory>
                                        <includes>**/oxm/**/*.xml</includes>
                                        <version>${aai.schema.service.version}</version>
                                    </artifactItem>
                                </artifactItems>
                                <!-- other configurations here -->
                            </configuration>
                        </execution>
                        <execution>
                            <id>unpack-edgerules-dependency</id>
                            <phase>initialize</phase>
                            <goals>
                                <goal>unpack</goal>
                            </goals>
                            <configuration>
                                <artifactItems>
                                    <artifactItem>
                                        <groupId>org.onap.aai.schema-service</groupId>
                                        <artifactId>aai-schema</artifactId>
                                        <outputDirectory>${project.basedir}/src/main/resources/schema/</outputDirectory>
                                        <includes>**/dbedgerules/**/*.json</includes>
                                        <version>${aai.schema.service.version}</version>
                                    </artifactItem>
                                </artifactItems>
                                <!-- other configurations here -->
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.groovy.maven</groupId>
                    <artifactId>gmaven-plugin</artifactId>
                    <version>1.0</version>
                    <executions>
                        <execution>
                            <phase>validate</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <source>
                                    println project.properties['aai.project.version'];
                                    def versionArray;
                                    if (project.properties['aai.project.version'] != null) {
                                        versionArray = project.properties['aai.project.version'].split('\\.');
                                    }

                                    project.properties["project.major.version"] = versionArray[0];
                                    project.properties["project.minor.version"] = versionArray[1];
                                    project.properties['project.docker.latesttag.version'] = versionArray[0] + '.' + versionArray[1] + '-STAGING-latest';
                                    println 'New Tag for docker:' + project.properties['project.docker.latesttag.version'];
                                </source>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>com.mycila</groupId>
                    <artifactId>license-maven-plugin</artifactId>
                    <version>3.0</version>
                    <configuration>
                        <header>LICENSE.TXT</header>
                        <includes>
                            <include>src/main/java/**</include>
                            <include>src/test/java/**</include>
                            <include>pom.xml</include>
                        </includes>
                        <skipExistingHeaders>false</skipExistingHeaders>
                        <skip>false</skip>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>2.4.1</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>${project.basedir}/src/main/resources/schema</directory>
                            <includes>
                                <include>**/*</include>
                            </includes>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.groovy.maven</groupId>
                <artifactId>gmaven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.10</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.4</version>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptors>
                        <descriptor>src/main/assembly/descriptor.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id> <!-- this is used for inheritance merges -->
                        <phase>package</phase> <!-- bind to the packaging phase -->
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <runOrder>alphabetical</runOrder>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.mycila</groupId>
                <artifactId>license-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
            </plugin>
            <plugin>
              <artifactId>maven-resources-plugin</artifactId>
              <version>3.0.0</version>
              <executions>
                <execution>
                  <id>copy-fat-jar</id>
                  <phase>post-integration-test</phase>
                  <goals>
                    <goal>copy-resources</goal>
                  </goals>
                  <configuration>
                      <outputDirectory>${aai.build.directory}/lib/</outputDirectory>
                      <resources>
                          <resource>
                              <directory>${project.build.directory}/</directory>
                              <includes>
                                  <include>${project.artifactId}-${project.version}.jar</include>
                              </includes>
                              <filtering>false</filtering>
                          </resource>
                      </resources>
                  </configuration>
                </execution>
              </executions>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>${start-class}</mainClass>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>**/*WebSecurityConfig.*</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.1.2</version>
                <configuration>
                    <classesDirectory>${project.build.outputDirectory}</classesDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.10.4</version>
                <configuration>
                    <failOnError>false</failOnError>
                    <doclet>org.umlgraph.doclet.UmlGraphDoc</doclet>
                    <docletArtifact>
                        <groupId>org.umlgraph</groupId>
                        <artifactId>umlgraph</artifactId>
                        <version>5.6</version>
                    </docletArtifact>
                    <additionalparam>-views</additionalparam>
                    <useStandardDocletOptions>true</useStandardDocletOptions>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
</project>
